-----------------------------
|Pseudo Code of Parallel A* |
-----------------------------


1. Initialize the grid ⭐️
2. Create a cell containing the start cell -> (start_cell) ⭐️
3. Create a cell containing the destination cell -> (goal_cell) ⭐️
4. Create a list of neighbors of (start_cell) -> (adjacent_list) ⭐️
5. Create the threads for each cell in (adjacent_list) as (local_start)⭐️

6. For each thread follow these steps:

   4.1 Put the (local_start) on the open list ⭐️
   4.2 While the (open) list is not empty { ⭐️

      4.2.1 Get the cell of the of the (open) list with the lowest cost and call it (current_cell)

      4.2.2 If (current_cell) is the same state as (goal_cell) we have found the solution

         Break

      4.2.3 Generate each state of (successor_cell) of (current_cell)
      
      4.2.4 For each (successor_cell) of (current_cell) {

         4.2.4.1 Set the cost of (successor_cell) to be the cost of (current_cell) plus the cost to get to (successor_cell) from (current_cell).

         4.2.4.2 If (successor_cell) is in (open) list but the existing one is as good or better
            
            Then discard this (successor) and continue

         4.2.4.3 Remove the occurrence of (successor_cell) from (open) list and (closest)

         4.2.4.4 Set the parent of (successor_cell) to (current_cell)
   }

7. Wait for all threads to finish (join)
8. Get the path found by each thread
9. Find the best path (i.e. the one with minimum cost)

() means is a var